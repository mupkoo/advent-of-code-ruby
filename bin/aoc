#!/usr/bin/env ruby
require 'bundler/setup'
require 'dry/cli'
require 'erb'
require_relative '../lib/aoc/client'

module AOC
  module CLI
    module Commands
      extend Dry::CLI::Registry

      class Run < Dry::CLI::Command
        desc 'Run a solution'

        option :year, default: '2023', values: (2015..2023).map(&:to_s), desc: 'Year'
        option :day, default: nil, values: (1..25).map(&:to_s), desc: 'Day, defaults to the latest day'
        option :part, default: 1, values: (1..2).map(&:to_s), desc: 'Part'

        def call(**options)
          year = options.fetch(:year)
          day = options.fetch(:day) { latest_day(year) }
          part = options.fetch(:part)

          day = day.to_s.rjust(2, '0')
          folder = "#{year}/day#{day}/"

          unless File.exist?(File.join(folder, 'solution.rb'))
            puts "No solution found for #{day}, #{year}"
            exit 1
          end

          unless File.exist?(File.join(folder, 'input.txt'))
            puts "No input found for day #{day}, #{year}"
            exit 1
          end

          require File.join(__dir__, '../', folder, 'solution.rb')

          puts "Running solution for day #{day}, #{year} - part #{part}..."
          result = Object.const_get("Aoc#{year}::Day#{day}").new.solve(part)
          puts "Result: #{result}"
        end

        private

        def latest_day(year)
          Dir["#{year}/day*"].map do |path|
            path.split('/').last.gsub('day', '').to_i
          end.max
        end
      end

      class Generate < Dry::CLI::Command
        desc 'Generate a solution skeleton'

        argument :type, values: %w[skeleton input], default: 'skeleton', desc: 'Type of file to generate'
        option :year, default: '2023', values: (2015..2023).map(&:to_s), desc: 'Year'
        option :day, default: nil, values: (1..25).map(&:to_s), desc: 'Day, defaults to the latest day'

        def call(type:, **options)
          @year = options.fetch(:year)
          @day = options.fetch(:day) { latest_day(@year, type) }

          if @day < 1 || @day > 25
            puts "Invalid day: #{day}, must be between 1 and 25"
            exit 1
          end

          puts "Generating #{type} for day #{@day}, #{@year}..."
          folder = "#{@year}/day#{@day.to_s.rjust(2, '0')}"

          FileUtils.mkdir_p(folder)
          File.write("#{folder}/input.txt", client.input(@year, @day).body)
          File.write("#{folder}/solution.rb", compile_template('solution')) if type == 'skeleton'
          File.write("#{folder}/solution_spec.rb", compile_template('solution_spec')) if type == 'skeleton'

          puts 'Done!'
        end

        private

        def latest_day(year, type = 'skeleton')
          days = Dir["#{year}/day*"].map do |path|
            path.split('/').last.gsub('day', '').to_i
          end

          if days.empty?
            1
          else
            days.max + (type == 'skeleton' ? 1 : 0)
          end
        end

        def client
          @client ||= AOC::Client.new(ENV.fetch('AOC_SESSION_COOKIE'))
        end

        def compile_template(template_name)
          template = File.read(File.join(__dir__, "../templates/#{template_name}.rb.erb"))
          ERB.new(template).result(binding)
        end
      end

      register 'run', Run
      register 'generate', Generate, aliases: ['g']
    end
  end
end

Dry::CLI.new(AOC::CLI::Commands).call
